##톰켓 관련 설정 및 데이베이스 관련 설정
spring.application.name=czo3

##http://192.168.111.105:80
server.address=0.0.0.0
server.port=8000

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

##로그 출력 설정
logging.level.org.springframework=info
logging.level.org.mbc=debug

##데이터베이스 1,2단계 설정
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
##추후 db 설정
spring.datasource.url=jdbc:mariadb://192.168.0.183:3306/czo3
spring.datasource.username=lhw
spring.datasource.password=1234

##jpa 관련 설정 추가(jpa : orm에서 시작되었다.) 데이터베이스도 객체형으로 보자

spring.jpa.hibernate.ddl-auto=update

## uploadPath=file:///c:/shop/
uploadPath=file:///C:/shop/item/
## 상품팀에서 추가함 ##
server.tomcat.max-part-count=-1
#파일 한 개당 최대 사이즈
spring.servlet.multipart.max-file-size=20MB
#요청당 최대 파일 크기
spring.servlet.multipart.max-request-size=100MB
#상품 이미지 업로드 경로 ("파일을 어디에 저장할지" (백엔드 내부 작업용))
itemImgLocation=C:/shop/item
## itemImgLocation=src/main/resources/static/images/item
#리소스 업로드 경로 ("저장된 파일을 웹에서 어떻게 불러올지" (프론트에서 보기용))
#uploadPath=file:///c:/shop/

spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me

spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect_uri=http://192.168.0.183:8000/login/oauth2/code/kakao

## 카카오api -> REST API키
spring.security.oauth2.client.registration.kakao.client-id=e8148ae6e1ca8fa87846303845db46fb
## 카카오api -> 시크릿키
spring.security.oauth2.client.registration.kakao.client-secret=ZE4HTnRG5dm8LNgHk49ToXZCFSLqhKBo

##spring.security.oauth2.client.registration.kakao.client-authentication-method=POST 6버전부터 변경.
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email

#메일 설정
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=leehwoo3932@gmail.com
spring.mail.password=whgsvyokkpncembi
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
logging.level.org.springframework.mail=DEBUG
logging.level.com.sun.mail.smtp=DEBUG

# jwt access token
#예측 불가능한 랜덤 문자열이어야 합니다. 32~64글자권장
jwt.access-secret=5nG7hR8xLq2P0kT9mYv3sF1bZcW4dU6e
# 10분 = 10 * 60 * 1000 ms = 600000
jwt.access-validity-ms=30000

# jwt refresh token
jwt.refresh-secret=Jk9fX4mQ2vZ1bE7pR6tY8nH0sW3dC5aL
# 만료기간 14일 1209600000
jwt.refresh-validity-ms=1209600000

# Redis 설정
# Redis 단일 URL 설정
-spring.data.redis.host=192.168.0.183
+spring.data.redis.host=127.0.0.1
spring.data.redis.port=6379


# kafka 설정
spring.kafka.bootstrap-servers=192.168.0.183:9092

# Spring Kafka 내부 로그 레벨
logging.level.org.apache.kafka=warn
logging.level.org.springframework.kafka=warn

# 필요시 Kafka Client 라이브러리 로그도 조정
logging.level.kafka=warn
logging.level.kafka.network=warn
logging.level.kafka.client=warn
# Producer 기본 설정 (kafkaConfig확인)

# Consumer 기본 설정 (kafkaConfig확인)

#다중 서버에서 채팅방의 참가자가 어느 서버에서 접근했는지 파악
server.id=server-A

##CREATE DATABASE `bootex` /*!40100 COLLATE 'utf8_general_ci' */;
#SHOW DATABASES;

##CREATE USER 'bootuser'@'%' IDENTIFIED BY 'bootuser';
#GRANT USAGE ON *.* TO 'bootuser'@'%';
#GRANT EXECUTE, SELECT, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON `bootex`.* TO 'bootuser'@'%' WITH GRANT OPTION;
#FLUSH PRIVILEGES;

